// Generator + Datasource
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================
// User (Người dùng)
// ==============================
model User {
  id        String    @id @default(uuid())
  name      String
  imageUrl  String?
  email     String    @unique
  password  String
  role      Role      @default(USER)
  warehouses Warehouse[] @relation("UserWarehouses")
  stores     Store[]     @relation("UserStores")
  orders Order[]
  transactions Transaction[]  @relation("UserTransactions")
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  STAFF
  USER
}

// ==============================
// Warehouse (Kho hàng)
// ==============================
model Warehouse {
  id         String       @id @default(uuid())
  name       String
  location   String
  imageUrl  String?
  capacity   Int?
  inventories Inventory[]
  transactions Transaction[]
  productInstances ProductInstance[]
  users      User[]       @relation("UserWarehouses")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

// ==============================
// Store (Cửa hàng)
// ==============================
model Store {
  id         String       @id @default(uuid())
  name       String
  location   String
  imageUrl  String?
  inventories Inventory[]
  transactions Transaction[]
  productInstances ProductInstance[] 
  users      User[]       @relation("UserStores")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

// ==============================
// Product (Sản phẩm)
// ==============================
model Product {
  id         String       @id @default(uuid())
  name       String
  sku        String       @unique
  category   String?
  priceIn    Float
  priceOut   Float
  unit       String
  imageUrl   String?
  inventories Inventory[]
  transactions Transaction[]
  orderItems OrderItem[]
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?
  instances ProductInstance[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

// ==============================
// Inventory (Tồn kho)
// ==============================
model Inventory {
  id          String     @id @default(uuid())
  product     Product    @relation(fields: [productId], references: [id])
  productId   String
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId String?
  store       Store?     @relation(fields: [storeId], references: [id])
  storeId     String?
  quantity    Int        @default(0)
  minStock    Int        @default(0)
  updatedAt   DateTime   @updatedAt

  @@unique([productId, warehouseId, storeId])
}

// ==============================
// Transaction (Giao dịch nhập/xuất)
// ==============================
model Transaction {
  id          String      @id @default(uuid())
  type        TransactionType
  imageUrl  String?
  product     Product     @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int
  warehouse   Warehouse?  @relation(fields: [warehouseId], references: [id])
  warehouseId String?
  store       Store?      @relation(fields: [storeId], references: [id])
  storeId     String?
  createdBy   User       @relation("UserTransactions", fields: [userId], references: [id])
  userId      String
  approved    Boolean     @default(false)
  createdAt   DateTime    @default(now())
}

enum TransactionType {
  IMPORT      // nhập kho
  EXPORT      // xuất kho
  TRANSFER    // chuyển kho
}


// ==============================
// ProductInstance (Tồn kho có imei (giá trị cao))
// ==============================
model ProductInstance {
  id          String     @id @default(uuid())
  product     Product    @relation(fields: [productId], references: [id])
  productId   String
  imei        String?    @unique   // với điện thoại/laptop
  serial      String?    @unique   // với sản phẩm khác
  status      InstanceStatus @default(IN_STOCK)
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId String?
  store       Store?     @relation(fields: [storeId], references: [id])
  storeId     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum InstanceStatus {
  IN_STOCK   // còn trong kho
  TRANSFERRED // đang chuyển kho
  SOLD       // đã bán
  RETURNED   // hàng trả lại
}

// ==============================
// Customer (Khách hàng)
// ==============================
model Customer {
  id        String   @id @default(uuid())
  imageUrl  String?
  name      String
  phone     String   @unique
  email     String?  @unique
  address   String?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}


// ==============================
// Order (Đơn hàng)
// ==============================

model Order {
  id        String     @id @default(uuid())
  customer  Customer   @relation(fields: [customerId], references: [id])
  customerId String
  user      User       @relation(fields: [userId], references: [id]) // nhân viên tạo đơn
  userId    String
  imageUrl  String?
  status    OrderStatus @default(PENDING)
  items     OrderItem[]
  total     Float
  payments  Payment[]
  shipments Shipment[]
  createdAt DateTime   @default(now())
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  COMPLETED
}

// ==============================
// Finance (Tài chính / Thanh toán)
// ==============================

model Payment {
  id        String   @id @default(uuid())
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  amount    Float
  method    PaymentMethod
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
}

model Shipment {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  driver    Driver?  @relation(fields: [driverId], references: [id])
  driverId  String?
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId String?
  route     Route?   @relation(fields: [routeId], references: [id])
  routeId   String?
  status    ShipmentStatus @default(PENDING)
  tracking  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}


enum ShipmentStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  RETURNED
}

model Supplier {
  id        String        @id @default(uuid())
  name      String
  phone     String?
  email     String?
  address   String?
  products  Product[]    
  createdAt DateTime      @default(now())
  updatedAt DateTime @updatedAt

}

model Vehicle {
  id        String   @id @default(uuid())
  plate     String   @unique
  imageUrl  String?
  type      String
  capacity  Int?
  drivers   Driver[]
  shipments Shipment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Driver {
  id        String   @id @default(uuid())
  name      String
  imageUrl  String?
  badge     DriverBadge @default(FREE)
  phone     String   @unique
  license   String?
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId String?
  shipments Shipment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
enum DriverBadge {
  BUSY
  FREE
  OFFLINE
}

model Route {
  id        String    @id @default(uuid())
  name      String
  origin    String
  destination String
  shipments Shipment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// ==============================
// Session
// ==============================
model Session {
  id        String   @id @default(uuid()) 
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}
