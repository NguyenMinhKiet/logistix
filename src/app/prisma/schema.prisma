// Generator + Datasource
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================
// User (Người dùng)
// ==============================
model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  warehouses Warehouse[] @relation("UserWarehouses")
  stores     Store[]     @relation("UserStores")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  STAFF
  USER
}

// ==============================
// Warehouse (Kho hàng)
// ==============================
model Warehouse {
  id         String       @id @default(uuid())
  name       String
  location   String
  capacity   Int?
  inventories Inventory[]
  transactions Transaction[]
  users      User[]       @relation("UserWarehouses")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

// ==============================
// Store (Cửa hàng)
// ==============================
model Store {
  id         String       @id @default(uuid())
  name       String
  location   String
  inventories Inventory[]
  transactions Transaction[]
  users      User[]       @relation("UserStores")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

// ==============================
// Product (Sản phẩm)
// ==============================
model Product {
  id         String       @id @default(uuid())
  name       String
  sku        String       @unique
  category   String?
  priceIn    Float
  priceOut   Float
  unit       String
  imageUrl   String?
  inventories Inventory[]
  transactions Transaction[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

// ==============================
// Inventory (Tồn kho)
// ==============================
model Inventory {
  id          String     @id @default(uuid())
  product     Product    @relation(fields: [productId], references: [id])
  productId   String
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId String?
  store       Store?     @relation(fields: [storeId], references: [id])
  storeId     String?
  quantity    Int        @default(0)
  minStock    Int        @default(0)
  updatedAt   DateTime   @updatedAt

  @@unique([productId, warehouseId, storeId])
}

// ==============================
// Transaction (Giao dịch nhập/xuất)
// ==============================
model Transaction {
  id          String      @id @default(uuid())
  type        TransactionType
  product     Product     @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int
  warehouse   Warehouse?  @relation(fields: [warehouseId], references: [id])
  warehouseId String?
  store       Store?      @relation(fields: [storeId], references: [id])
  storeId     String?
  createdBy   User        @relation(fields: [userId], references: [id])
  userId      String
  approved    Boolean     @default(false)
  createdAt   DateTime    @default(now())
}

enum TransactionType {
  IMPORT      // nhập kho
  EXPORT      // xuất kho
  TRANSFER    // chuyển kho
}


// ==============================
// ProductInstance (Tồn kho có imei (giá trị cao))
// ==============================
model ProductInstance {
  id          String     @id @default(uuid())
  product     Product    @relation(fields: [productId], references: [id])
  productId   String
  imei        String?    @unique   // với điện thoại/laptop
  serial      String?    @unique   // với sản phẩm khác
  status      InstanceStatus @default(IN_STOCK)
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId String?
  store       Store?     @relation(fields: [storeId], references: [id])
  storeId     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum InstanceStatus {
  IN_STOCK   // còn trong kho
  TRANSFERRED // đang chuyển kho
  SOLD       // đã bán
  RETURNED   // hàng trả lại
}
